Module 4) Working with Database using SQL 


1) Statement to create the Contact table
mysql> CREATE TABLE Company (
    -> CompanyID INT PRIMARY KEY,
    -> CompanyName VARCHAR(45),
    -> Street VARCHAR(45),
    -> City VARCHAR(45),
    -> State VARCHAR(2),
    -> Zip VARCHAR(10));


2) Statement to create the Employee table
mysql> CREATE TABLE Employee (
    -> EmployeeID INT PRIMARY KEY,
    -> FirstName VARCHAR(45),
    -> LastName VARCHAR(45),
    -> Salary DECIMAL(10,2),
    -> HireDate DATE,
    -> JobTitle VARCHAR(25),
    -> Email VARCHAR(45),
    -> Phone VARCHAR(12));


3) Statement to create the ContactEmployee table
HINT: Use DATE as the datatype for ContactDate. It allows you to store the
date in this format: YYYY-MM-DD (i.e., ‘2014-03-12’ for March 12, 2014).
mysql> CREATE TABLE ContactEmployee (
    -> ContactEmployeeID INT PRIMARY KEY,
    -> ContactID INT,
    -> EmployeeID INT,
    -> ContactDate DATE,
    -> Description VARCHAR(100),
    -> FOREIGN KEY (ContactID) REFERENCES Contact(ContactID),
    -> FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID));


4) In the Employee table, the statement that changes Lesley Bland’s phone number to 215-555-8800

5) In the Company table, the statement that changes the name of “Urban Outfitters, Inc.” to “Urban Outfitters” .

6) In ContactEmployee table, the statement that removes Dianne Connor’s contact event with Jack Lee (one statement).
HINT: Use the primary key of the ContactEmployee table to specify the correct record to remove.

7) Write the SQL SELECT query that displays the names of the employees that have contacted Toll Brothers (one statement). Run the SQL SELECT query in MySQL Workbench. Copy the results below as well.

8) What is the significance of “%” and “_” operators in the LIKE statement?


9) Explain normalization in the context of databases.
--> Normalization in the context of databases refers to the process of organizing data to minimize redundancy and improve data integrity. It involves structuring a database according to a series of rules to reduce data anomalies and ensure consistent and efficient data storage. The main goals of normalization are to eliminate redundant data, ensure logical data dependencies, and make data management more efficient.

Normalization is typically achieved through a series of steps called normal forms. Each normal form builds upon the previous one, adding more rigorous rules for data structure. Here are the commonly used normal forms:

First Normal Form (1NF)
Rule: Ensure that the table has a primary key and that all values in each column are atomic (indivisible).
Purpose: Eliminate repeating groups and ensure each column contains unique data.
Example: A table with columns for a list of phone numbers (Phone1, Phone2, Phone3) would be divided into separate rows with a single phone number per row.

Second Normal Form (2NF)
Rule: Ensure the table is in 1NF and that all non-key columns are fully dependent on the primary key.
Purpose: Remove partial dependencies where non-key columns depend on part of a composite primary key.
Example: If a table contains student information along with course details, split it into two tables: one for student information and another for course enrollment details, each with its own primary key.

Third Normal Form (3NF)
Rule: Ensure the table is in 2NF and that all non-key columns are only dependent on the primary key.
Purpose: Eliminate transitive dependencies where non-key columns depend on other non-key columns.
Example: If a table has student details and also includes department information, create separate tables for student details and department details to avoid redundancy.

Fourth Normal Form (4NF)
Rule: Ensure the table is in BCNF and has no multi-valued dependencies.
Purpose: Address situations where a column can have multiple independent multi-valued facts.
Example: If a table records multiple phone numbers and email addresses for employees, separate them into different tables to avoid multi-valued dependencies.

Fifth Normal Form (5NF)
Rule: Ensure the table is in 4NF and that every join dependency is a consequence of the candidate keys.
Purpose: Decompose tables further to handle cases where information can be reconstructed using joins without introducing redundancy.
Example: Complex scenarios where information can be split into smaller tables that can be recombined using joins without losing data integrity.

Benefits of Normalization
Reduced Data Redundancy: By eliminating duplicate data, normalization ensures that each piece of data is stored only once.
Improved Data Integrity: Ensures consistency and accuracy by enforcing rules about data dependencies.
Efficient Data Management: Simplifies updates, deletions, and insertions by reducing the complexity of relationships between tables.
Enhanced Query Performance: While normalized databases can sometimes require more complex queries, they often result in faster query performance due to smaller, more focused tables.

10) What does a join in MySQL mean?

11) What do you understand about DDL, DCL, and DML in MySQL?

12) What is the role of the MySQL JOIN clause in a query, and what are some common types of joins?
